<?xml version="1.0" encoding="UTF-8"?>
<model version="7.0.1" links="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm7.xsd">
 <documentation>Real-time example</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Shared}-->
 <package name="Shared" stereotype="0x01">
  <!--${Shared::AppSignals}-->
  <attribute name="AppSignals" type="enum" visibility="0x04" properties="0x00">
   <code>{
    PERIODIC_SPEC_SIG = Q_USER_SIG,
    TIMEOUT_SIG,
    // ...
    MAX_SIG  // the last signal
};</code>
  </attribute>
  <!--${Shared::PeriodicSpecEvt}-->
  <class name="PeriodicSpecEvt" superclass="qpc::QEvt">
   <!--${Shared::PeriodicSpecEvt::ticks}-->
   <attribute name="ticks" type="uint32_t" visibility="0x00" properties="0x00"/>
   <!--${Shared::PeriodicSpecEvt::inner_evt}-->
   <attribute name="inner_evt" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <!--${Shared::AO_Period_High}-->
  <attribute name="AO_Period_High" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= (QActive *)&amp;PeriodHigh_inst;</code>
  </attribute>
  <!--${Shared::PeriodHigh_ctor}-->
  <operation name="PeriodHigh_ctor" type="void" visibility="0x00" properties="0x00">
   <code>PeriodHigh * const me = &amp;PeriodHigh_inst;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;PeriodHigh_initial));
QTimeEvt_ctorX(&amp;me-&gt;te, (QActive *)me, TIMEOUT_SIG, 0U);</code>
  </operation>
  <!--${Shared::AO_Periodic_Mid}-->
  <attribute name="AO_Periodic_Mid" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= (QActive *)&amp;PeriodMid_inst;</code>
  </attribute>
  <!--${Shared::PeriodMid_ctor}-->
  <operation name="PeriodMid_ctor" type="void" visibility="0x00" properties="0x00">
   <code>PeriodMid * const me = &amp;PeriodMid_inst;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;PeriodMid_initial));
QTimeEvt_ctorX(&amp;me-&gt;te, (QActive *)me, TIMEOUT_SIG, 0U);</code>
  </operation>
  <!--${Shared::AO_Periodic_Low}-->
  <attribute name="AO_Periodic_Low" type="QActive * const" visibility="0x00" properties="0x00">
   <code>= (QActive *)&amp;PeriodLow_inst;</code>
  </attribute>
  <!--${Shared::PeriodLow_ctor}-->
  <operation name="PeriodLow_ctor" type="void" visibility="0x00" properties="0x00">
   <code>PeriodLow * const me = &amp;PeriodLow_inst;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;PeriodLow_initial));
QTimeEvt_ctorX(&amp;me-&gt;te, (QActive *)me, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::PeriodHigh}-->
  <class name="PeriodHigh" superclass="qpc::QMActive">
   <!--${AOs::PeriodHigh::te}-->
   <attribute name="te" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <!--${AOs::PeriodHigh::inst}-->
   <attribute name="inst" type="PeriodHigh" visibility="0x00" properties="0x01"/>
   <!--${AOs::PeriodHigh::periodic_evt}-->
   <attribute name="periodic_evt" type="PeriodicSpecEvt" visibility="0x00" properties="0x00"/>
   <!--${AOs::PeriodHigh::SM}-->
   <statechart properties="0x02">
    <!--${AOs::PeriodHigh::SM::initial}-->
    <initial target="../1">
     <action>// the initial event must be provided and must be WORKLOAD_SIG
QEvt const *e =  (QEvt const *)par;

Q_REQUIRE_ID(300, (e != (QEvt const *)0)
             &amp;&amp; (e-&gt;sig == PERIODIC_SPEC_SIG));
QTimeEvt_armX(&amp;me-&gt;te,
    Q_EVT_CAST(PeriodicSpecEvt)-&gt;ticks,
    Q_EVT_CAST(PeriodicSpecEvt)-&gt;ticks);</action>
     <initial_glyph conn="2,4,5,1,46,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::PeriodHigh::SM::active}-->
    <state name="active">
     <!--${AOs::PeriodHigh::SM::active::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action brief="long-RTC">task_high(me,&amp;me-&gt;periodic_evt.inner_evt);</action>
      <tran_glyph conn="2,20,3,-1,40">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,44,18"/>
    </state>
    <state_diagram size="71,58"/>
   </statechart>
  </class>
  <!--${AOs::PeriodMid}-->
  <class name="PeriodMid" superclass="qpc::QMActive">
   <!--${AOs::PeriodMid::te}-->
   <attribute name="te" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <!--${AOs::PeriodMid::inst}-->
   <attribute name="inst" type="PeriodMid" visibility="0x00" properties="0x01"/>
   <!--${AOs::PeriodMid::periodic_evt}-->
   <attribute name="periodic_evt" type="PeriodicSpecEvt" visibility="0x00" properties="0x00"/>
   <!--${AOs::PeriodMid::SM}-->
   <statechart properties="0x02">
    <!--${AOs::PeriodMid::SM::initial}-->
    <initial target="../1">
     <action>// the initial event must be provided and must be WORKLOAD_SIG
QEvt const *e =  (QEvt const *)par;

Q_REQUIRE_ID(300, (e != (QEvt const *)0)
             &amp;&amp; (e-&gt;sig == PERIODIC_SPEC_SIG));
QTimeEvt_armX(&amp;me-&gt;te,
    Q_EVT_CAST(PeriodicSpecEvt)-&gt;ticks,
    Q_EVT_CAST(PeriodicSpecEvt)-&gt;ticks);</action>
     <initial_glyph conn="2,4,5,1,46,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::PeriodMid::SM::active}-->
    <state name="active">
     <!--${AOs::PeriodMid::SM::active::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action brief="long-RTC">task_mid(me, &amp;me-&gt;periodic_evt.inner_evt);</action>
      <tran_glyph conn="2,20,3,-1,40">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,44,18"/>
    </state>
    <state_diagram size="71,58"/>
   </statechart>
  </class>
  <!--${AOs::PeriodLow}-->
  <class name="PeriodLow" superclass="qpc::QMActive">
   <!--${AOs::PeriodLow::te}-->
   <attribute name="te" type="QTimeEvt" visibility="0x00" properties="0x00"/>
   <!--${AOs::PeriodLow::inst}-->
   <attribute name="inst" type="PeriodLow" visibility="0x00" properties="0x01"/>
   <!--${AOs::PeriodLow::periodic_evt}-->
   <attribute name="periodic_evt" type="PeriodicSpecEvt" visibility="0x00" properties="0x00"/>
   <!--${AOs::PeriodLow::SM}-->
   <statechart properties="0x02">
    <!--${AOs::PeriodLow::SM::initial}-->
    <initial target="../1">
     <action>// the initial event must be provided and must be WORKLOAD_SIG
QEvt const *e =  (QEvt const *)par;

Q_REQUIRE_ID(300, (e != (QEvt const *)0)
             &amp;&amp; (e-&gt;sig == PERIODIC_SPEC_SIG));
QTimeEvt_armX(&amp;me-&gt;te,
    Q_EVT_CAST(PeriodicSpecEvt)-&gt;ticks,
    Q_EVT_CAST(PeriodicSpecEvt)-&gt;ticks);</action>
     <initial_glyph conn="2,4,5,1,46,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::PeriodLow::SM::active}-->
    <state name="active">
     <!--${AOs::PeriodLow::SM::active::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action brief="long-RTC">task_low(me, &amp;me-&gt;periodic_evt.inner_evt);</action>
      <tran_glyph conn="2,20,3,-1,40">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,44,18"/>
    </state>
    <state_diagram size="71,58"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::qm.h}-->
  <file name="qm.h">
   <text>#ifndef QM_H_
#define QM_H_
#include &quot;qpc.h&quot;
$declare ${Shared}
void task_mid(void *par, uint8_t *sig);
void task_high(void *par, uint8_t *sig);
void task_low(void *par, uint8_t *sig);
#endif // APP_H_</text>
  </file>
  <!--${.::period_high.c}-->
  <file name="period_high.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time event framework
#include &quot;bsp.h&quot;               // Board Support Package
#include &quot;qm.h&quot;               // Application interface

$declare ${AOs::PeriodHigh}

Q_DEFINE_THIS_MODULE(&quot;periodic_high&quot;)

$define ${Shared::PeriodHigh_ctor}
$define ${Shared::AO_Period_High}
$define ${AOs::PeriodHigh}</text>
  </file>
  <!--${.::period_mid.c}-->
  <file name="period_mid.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time event framework
#include &quot;bsp.h&quot;               // Board Support Package
#include &quot;qm.h&quot;               // Application interface

$declare ${AOs::PeriodMid}

Q_DEFINE_THIS_MODULE(&quot;periodic_mid&quot;)

$define ${Shared::PeriodMid_ctor}
$define ${Shared::AO_Periodic_Mid}
$define ${AOs::PeriodMid}</text>
  </file>
  <!--${.::period_low.c}-->
  <file name="period_low.c">
   <text>#include &quot;qpc.h&quot;               // QP/C real-time event framework
#include &quot;bsp.h&quot;               // Board Support Package
#include &quot;qm.h&quot;               // Application interface

$declare ${AOs::PeriodLow}

Q_DEFINE_THIS_MODULE(&quot;periodic_lwo&quot;)

$define ${Shared::PeriodLow_ctor}
$define ${Shared::AO_Periodic_Low}
$define ${AOs::PeriodLow}</text>
  </file>
 </directory>
</model>
